zmodload zsh/zprof

alias python=python3
alias pip=pip3

# Customize to your needs...
export PATH=$HOME/bin:$PATH

export PATH="$PATH:/home/fernando/.local/bin"

if [[ -f "/opt/homebrew/bin/brew" ]]; then
    eval "$(/opt/homebrew/bin/brew shellenv)"
    fpath=("/opt/homebrew/share/zsh/site-functions" $fpath)
    export PATH="/opt/homebrew/opt/coreutils/libexec/gnubin:$PATH"
    # export LIBRARY_PATH=/opt/homebrew/opt/openssl/lib/:/opt/homebrew/lib
fi

# My exports
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

if [[ -s /mnt/c/WINDOWS ]]; then
    export PATH="/home/ftakai/.pyenv/shims:/home/ftakai/bin:/usr/local/bin:/usr/local/sbin:/home/ftakai/.pyenv/shims:/home/ftakai/.pyenv/bin:/home/ftakai/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/lib/wsl/lib"
    export NODE_OPTIONS=--openssl-legacy-provider
fi

if [[ -s "$HOME/.config/forgit/forgit.plugin.zsh" ]]; then
    source "$HOME/.config/forgit/forgit.plugin.zsh"
fi

if [[ (( $+commands[go] )) ]]; then
    export PATH="$(go env GOPATH)/bin:$PATH"
fi

alias vim=nvim

export SVN_EDITOR='nvim'
export EDITOR='nvim'
export SUDO_EDITOR='nvim'

export LC_CTYPE=en_US.UTF-8
export LC_ALL=en_US.UTF-8

export GIT_EDITOR="nvim"

export HISTSIZE=1000000
export SAVEHIST=1000000
export HISTFILE="$HOME/.zsh_history"

alias z='j'
alias history="fc -l 1"

# export PYENV_ROOT="$HOME/.pyenv"
# export ANDROID_HOME="$HOME/Android/Sdk"

__git_files(){
    _wanted files expl 'local files' _files
}

bindkey "^[[3~" delete-char
export LESS="-R"

alias k='kubectl'

function kubebash(){
    instance=$(kubectl get pods | awk '{print $1}' | fzf)

    if [[ -n $instance ]]; then
        echo "exec'ing into $instance"
        echo "kubectl exec $instance -ti -- bash"
        kubectl exec $instance -ti -- bash
    fi
}


function kubesh(){
    instance=$(kubectl get pods | awk '{print $1}' | fzf)

    if [[ -n $instance ]]; then
        echo "exec'ing into $instance"
        kubectl exec $instance -ti -- sh
    fi
}

function kubedescribe(){
    instance=$(kubectl get pods | awk '{print $1}' | fzf)

    if [[ -n $instance ]]; then
        kprod describe pod $instance | less
    fi
}


function kubelogs(){
    instance=$(kubectl get pods | awk '{print $1}' | fzf)

    if [[ -n $instance ]]; then
        kubectl logs --tail=100 -f $instance
    fi
}

function ff(){
    file=$(fd -t f | fzf-tmux -m -d "70%" --query="$1" --preview="bat --color=always {}" --ansi --preview-window='right:60%' +1)

    if [[ -n $file ]]; then
        print -s "nvim $(echo $file | tr '\n' ' ')"
        nvim $(echo $file | tr '\n' ' ')
    fi
}

function ffg(){
    file=$(INITIAL_QUERY="$1"
    RG_PREFIX="rg --column --line-number --no-heading --color=always --smart-case --ignore-file .gitignore"
    FZF_DEFAULT_COMMAND="$RG_PREFIX '$INITIAL_QUERY'" \
      fzf --bind "change:reload:$RG_PREFIX {q} || true" \
          --ansi --disabled --query "$INITIAL_QUERY" \
          --height=50% --layout=reverse)

    if [[ ! -z $file ]]; then
        split=("${(@s/:/)file}")
        print -s "vim $split[1] '+$split[2] norm! zzV'"
        vim $split[1] "+$split[2] norm! zzV"
    fi

}

function git-add(){
    forgit::add
    git commit -v
}

function git-remove(){
    forgit::reset::head
}

function git-checkout(){
    forgit::checkout::file
}

function git-branch(){
    forgit::checkout::branch
}

function gbranch(){
    git rev-parse --abbrev-ref HEAD | copy-stuff
}

function install-lsp-packages(){
    if [[ -f . .venv/bin/activate ]]; then
        . .venv/bin/activate
        pip install python-lsp-ruff==1.5.3
    else
        echo "There's no virtual env :/"
    fi
}

alias cal="cal -3"
alias gcv="git commit -v"
alias ssh="TERM=screen-256color ssh"

function update_package(){
    cd ~/builds && rm -fr $1 && cower -d $1 && cd $1 && makepkg -s && notify-send -u critical "aur update" "starting to install $1" && pacI *.xz && cd -
}

function update-all-packages(){
    packages=($(cat output.txt | sed -r 's/:: ([a-z0-9-]{1,}) .*?$/\1/g' | fzf -m))

    if [[ -n $packages ]]; then
        for pkg in $packages; do
            echo $pkg
            echo update_package $pkg
        done
    fi
}

stty -ixon

function check-mullvad() {
    curl https://am.i.mullvad.net/json | jq
}

function jwt-decode() {
  jq -R 'split(".") |.[0:2] | map(@base64d) | map(fromjson)' <<< $1
}

[[ -s "$HOME/bin/kubectl_completion" ]] && source "$HOME/bin/kubectl_completion"

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

[ -f /usr/share/fzf/key-bindings.zsh ] && source /usr/share/fzf/key-bindings.zsh
[ -f /usr/share/fzf/completion.zsh ] && source /usr/share/fzf/completion.zsh

# source /home/ftakai/.config/broot/launcher/bash/br
export VIRTUAL_ENV_DISABLE_PROMPT=1
# complete -C '/usr/bin/aws_completer' aws


if (( $+commands[pyenv] )); then
    export PATH="$HOME/.pyenv/bin:$PATH"
fi;

# export PATH="$HOME/.pyenv/shims:${PATH}"
export PYTHON_CONFIGURE_OPTS="--enable-shared"
export POETRY_VIRTUALENVS_IN_PROJECT=1

if is-darwin; then
    export AWS_CONFIG_FILE="$HOME/Projects/hubs/devops/config/aws-vault.cfg"
    export HOMEBREW_NO_AUTO_UPDATE=1
fi

if is-orbstack; then
    # we are inside orbstack
    export BROWSER="open"
    export AWS_CONFIG_FILE="$HOME/Projects/hubs/devops/config/aws-vault.cfg"
    export AWS_VAULT_BACKEND=pass
fi

if is-linux && (( $+commands[systemctl] )); then
    alias start="sudo systemctl start"
    alias stop="sudo systemctl stop"
    alias enables="sudo systemctl enable"
    alias disables="sudo systemctl disable"
    alias status="sudo systemctl status"
fi

export GPG_TTY=$(tty)
# eval "$(pyenv virtualenv-init -)"

if (( $+commands[nodenv] )); then
    eval "$(nodenv init -)"
fi;

if (( $+commands[powerline-daemon] )); then
    pgrep -f "powerline-daemon -q" 2>&1 > /dev/null || powerline-daemon -q
fi

if (( $+commands[direnv] )); then
    eval "$(direnv hook zsh)"
fi

if (( $+commands[op] )); then
    eval "$(op completion zsh)"; compdef _op op
fi

if (( $+commands[atuin] )); then
    eval "$(atuin init zsh --disable-up-arrow)"
fi

if (( $+commands[pipx] )); then
    eval "$(register-python-argcomplete pipx)"
fi

if (( $+commands[mirrord] )); then
    eval "$(mirrord completions zsh)"
    export MIRRORD_CHECK_VERSION="false"
fi

if (( $+commands[uv] )); then
    eval "$(uv generate-shell-completion zsh)"
fi
